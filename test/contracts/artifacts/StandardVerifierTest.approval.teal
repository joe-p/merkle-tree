#pragma version 10

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// keccak256Verify(hashedLeaf: bytes32, proof: bytes32[], root: bytes32): boolean
//
// Prove that a leaf is in a merkle tree by verifying the path to the root
//
// @param hashedLeaf The hashed leaf to verify
// @param proof The merkle proof
// @param root The merkle root
//
// @returns True if the proof is valid, false otherwise
keccak256Verify:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// test/contracts/standard_verifier.algo.ts:16
	// for (let i = 0; i < proof.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_0:
	// test/contracts/standard_verifier.algo.ts:16
	// i < proof.length
	frame_dig 0 // i: uint64
	frame_dig -2 // proof: bytes32[]
	len
	int 32
	/
	<
	bz *for_0_end

	// *if0_condition
	// test/contracts/standard_verifier.algo.ts:18
	// globals.opcodeBudget < 145
	global OpcodeBudget
	int 145
	<
	bz *if0_end

	// *if0_consequent
	// test/contracts/standard_verifier.algo.ts:19
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if0_end:
	// *if1_condition
	// test/contracts/standard_verifier.algo.ts:22
	// btobigint(proof[i]) > btobigint(hash)
	frame_dig -2 // proof: bytes32[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 0 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -1 // hashedLeaf: bytes32
	b>
	bz *if1_else

	// *if1_consequent
	// test/contracts/standard_verifier.algo.ts:23
	// hash = keccak256(hash + proof[i])
	frame_dig -1 // hashedLeaf: bytes32
	frame_dig -2 // proof: bytes32[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 0 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	concat
	keccak256
	frame_bury -1 // hash: bytes32
	b *if1_end

*if1_else:
	// test/contracts/standard_verifier.algo.ts:25
	// hash = keccak256(proof[i] + hash)
	frame_dig -2 // proof: bytes32[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 0 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -1 // hashedLeaf: bytes32
	concat
	keccak256
	frame_bury -1 // hash: bytes32

*if1_end:

*for_0_continue:
	// test/contracts/standard_verifier.algo.ts:16
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_0

*for_0_end:
	// test/contracts/standard_verifier.algo.ts:29
	// return hash === root;
	frame_dig -1 // hashedLeaf: bytes32
	frame_dig -3 // root: bytes32
	==

	// set the subroutine return value
	frame_bury 0
	retsub

// createApplication(byte[32],byte[32],byte[32])void
*abi_route_createApplication:
	// tupleKeccak256Root: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 0 (tupleKeccak256Root) for createApplication must be a byte[32]
	assert

	// addressKeccak256Root: byte[32]
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (addressKeccak256Root) for createApplication must be a byte[32]
	assert

	// uint64Keccak256Root: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (uint64Keccak256Root) for createApplication must be a byte[32]
	assert

	// execute createApplication(byte[32],byte[32],byte[32])void
	callsub createApplication
	int 1
	return

// createApplication(uint64Keccak256Root: bytes32, addressKeccak256Root: bytes32, tupleKeccak256Root: bytes32): void
createApplication:
	proto 3 0

	// test/contracts/standard_verifier_test.algo.ts:9
	// this.uint64Keccak256Root.value = uint64Keccak256Root
	byte 0x75696e7436344b656363616b323536526f6f74 // "uint64Keccak256Root"
	frame_dig -1 // uint64Keccak256Root: bytes32
	app_global_put

	// test/contracts/standard_verifier_test.algo.ts:10
	// this.addressKeccak256Root.value = addressKeccak256Root
	byte 0x616464726573734b656363616b323536526f6f74 // "addressKeccak256Root"
	frame_dig -2 // addressKeccak256Root: bytes32
	app_global_put

	// test/contracts/standard_verifier_test.algo.ts:11
	// this.tupleKeccak256Root.value = tupleKeccak256Root
	byte 0x7475706c654b656363616b323536526f6f74 // "tupleKeccak256Root"
	frame_dig -3 // tupleKeccak256Root: bytes32
	app_global_put
	retsub

// uint64keccak256Verify(uint64,byte[32][])bool
*abi_route_uint64keccak256Verify:
	// The ABI return prefix
	byte 0x151f7c75

	// proof: byte[32][]
	txna ApplicationArgs 2
	extract 2 0

	// leaf: uint64
	txna ApplicationArgs 1
	btoi

	// execute uint64keccak256Verify(uint64,byte[32][])bool
	callsub uint64keccak256Verify
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// uint64keccak256Verify(leaf: uint64, proof: bytes32[]): boolean
uint64keccak256Verify:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// test/contracts/standard_verifier_test.algo.ts:15
	// hashedLeaf = keccak256(keccak256(itob(leaf)))
	frame_dig -1 // leaf: uint64
	itob
	keccak256
	keccak256
	frame_bury 0 // hashedLeaf: byte[32]

	// test/contracts/standard_verifier_test.algo.ts:16
	// return this.keccak256Verify(hashedLeaf, proof, this.uint64Keccak256Root.value);
	byte 0x75696e7436344b656363616b323536526f6f74 // "uint64Keccak256Root"
	app_global_get
	frame_dig -2 // proof: bytes32[]
	frame_dig 0 // hashedLeaf: byte[32]
	callsub keccak256Verify

	// set the subroutine return value
	frame_bury 0
	retsub

// addressKeccak256Verify(address,byte[32][])bool
*abi_route_addressKeccak256Verify:
	// The ABI return prefix
	byte 0x151f7c75

	// proof: byte[32][]
	txna ApplicationArgs 2
	extract 2 0

	// leaf: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (leaf) for addressKeccak256Verify must be a address
	assert

	// execute addressKeccak256Verify(address,byte[32][])bool
	callsub addressKeccak256Verify
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// addressKeccak256Verify(leaf: Address, proof: bytes32[]): boolean
addressKeccak256Verify:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// test/contracts/standard_verifier_test.algo.ts:20
	// hashedLeaf = keccak256(keccak256(leaf))
	frame_dig -1 // leaf: Address
	keccak256
	keccak256
	frame_bury 0 // hashedLeaf: byte[32]

	// test/contracts/standard_verifier_test.algo.ts:21
	// return this.keccak256Verify(hashedLeaf, proof, this.addressKeccak256Root.value);
	byte 0x616464726573734b656363616b323536526f6f74 // "addressKeccak256Root"
	app_global_get
	frame_dig -2 // proof: bytes32[]
	frame_dig 0 // hashedLeaf: byte[32]
	callsub keccak256Verify

	// set the subroutine return value
	frame_bury 0
	retsub

// tupleKeccak256Verify((uint64,address),byte[32][])bool
*abi_route_tupleKeccak256Verify:
	// The ABI return prefix
	byte 0x151f7c75

	// proof: byte[32][]
	txna ApplicationArgs 2
	extract 2 0

	// leaf: (uint64,address)
	txna ApplicationArgs 1
	dup
	len
	int 40
	==

	// argument 1 (leaf) for tupleKeccak256Verify must be a (uint64,address)
	assert

	// execute tupleKeccak256Verify((uint64,address),byte[32][])bool
	callsub tupleKeccak256Verify
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// tupleKeccak256Verify(leaf: [uint64, Address], proof: bytes32[]): boolean
tupleKeccak256Verify:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// test/contracts/standard_verifier_test.algo.ts:25
	// hashedLeaf = keccak256(keccak256(rawBytes(leaf)))
	frame_dig -1 // leaf: [uint64, Address]
	keccak256
	keccak256
	frame_bury 0 // hashedLeaf: byte[32]

	// test/contracts/standard_verifier_test.algo.ts:26
	// return this.keccak256Verify(hashedLeaf, proof, this.tupleKeccak256Root.value);
	byte 0x7475706c654b656363616b323536526f6f74 // "tupleKeccak256Root"
	app_global_get
	frame_dig -2 // proof: bytes32[]
	frame_dig 0 // hashedLeaf: byte[32]
	callsub keccak256Verify

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	method "createApplication(byte[32],byte[32],byte[32])void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "uint64keccak256Verify(uint64,byte[32][])bool"
	method "addressKeccak256Verify(address,byte[32][])bool"
	method "tupleKeccak256Verify((uint64,address),byte[32][])bool"
	txna ApplicationArgs 0
	match *abi_route_uint64keccak256Verify *abi_route_addressKeccak256Verify *abi_route_tupleKeccak256Verify

	// this contract does not implement the given ABI method for call NoOp
	err
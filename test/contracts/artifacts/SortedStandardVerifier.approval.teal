#pragma version 10

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// keccak256Verify(byte[32],byte[32],byte[32][])bool
*abi_route_keccak256Verify:
	// The ABI return prefix
	byte 0x151f7c75

	// proof: byte[32][]
	txna ApplicationArgs 3
	extract 2 0

	// hashedLeaf: byte[32]
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (hashedLeaf) for keccak256Verify must be a byte[32]
	assert

	// root: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (root) for keccak256Verify must be a byte[32]
	assert

	// execute keccak256Verify(byte[32],byte[32],byte[32][])bool
	callsub keccak256Verify
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// keccak256Verify(root: bytes32, hashedLeaf: bytes32, proof: bytes32[]): boolean
//
// Prove that a leaf is in a merkle tree by verifying the path to the root
//
// @param root The merkle root
// @param hashedLeaf The hashed leaf to verify
// @param proof The merkle proof
//
// @returns True if the proof is valid, false otherwise
keccak256Verify:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// test/contracts/sorted_standard_verifier.algo.ts:16
	// for (let i = 0; i < proof.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_0:
	// test/contracts/sorted_standard_verifier.algo.ts:16
	// i < proof.length
	frame_dig 0 // i: uint64
	frame_dig -3 // proof: bytes32[]
	len
	int 32
	/
	<
	bz *for_0_end

	// *if0_condition
	// test/contracts/sorted_standard_verifier.algo.ts:18
	// globals.opcodeBudget < 145
	global OpcodeBudget
	int 145
	<
	bz *if0_end

	// *if0_consequent
	// test/contracts/sorted_standard_verifier.algo.ts:19
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if0_end:
	// *if1_condition
	// test/contracts/sorted_standard_verifier.algo.ts:22
	// btobigint(proof[i]) > btobigint(hash)
	frame_dig -3 // proof: bytes32[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 0 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -2 // hashedLeaf: bytes32
	b>
	bz *if1_else

	// *if1_consequent
	// test/contracts/sorted_standard_verifier.algo.ts:23
	// hash = keccak256(hash + proof[i])
	frame_dig -2 // hashedLeaf: bytes32
	frame_dig -3 // proof: bytes32[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 0 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	concat
	keccak256
	frame_bury -2 // hash: bytes32
	b *if1_end

*if1_else:
	// test/contracts/sorted_standard_verifier.algo.ts:25
	// hash = keccak256(proof[i] + hash)
	frame_dig -3 // proof: bytes32[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 0 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -2 // hashedLeaf: bytes32
	concat
	keccak256
	frame_bury -2 // hash: bytes32

*if1_end:

*for_0_continue:
	// test/contracts/sorted_standard_verifier.algo.ts:16
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_0

*for_0_end:
	// test/contracts/sorted_standard_verifier.algo.ts:29
	// return hash === root;
	frame_dig -2 // hashedLeaf: bytes32
	frame_dig -1 // root: bytes32
	==

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "keccak256Verify(byte[32],byte[32],byte[32][])bool"
	txna ApplicationArgs 0
	match *abi_route_keccak256Verify

	// this contract does not implement the given ABI method for call NoOp
	err
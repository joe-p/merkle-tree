{
  "hints": {
    "createApplication(byte[32],byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "uint64keccak256Verify(uint64,byte[32][])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addressKeccak256Verify(address,byte[32][])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "tupleKeccak256Verify((uint64,address),byte[32][])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "uint64Keccak256Root": {
          "type": "bytes",
          "key": "uint64Keccak256Root"
        },
        "addressKeccak256Root": {
          "type": "bytes",
          "key": "addressKeccak256Root"
        },
        "tupleKeccak256Root": {
          "type": "bytes",
          "key": "tupleKeccak256Root"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "StandardVerifierTest",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "uint64Keccak256Root",
            "type": "byte[32]"
          },
          {
            "name": "addressKeccak256Root",
            "type": "byte[32]"
          },
          {
            "name": "tupleKeccak256Root",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "uint64keccak256Verify",
        "args": [
          {
            "name": "leaf",
            "type": "uint64"
          },
          {
            "name": "proof",
            "type": "byte[32][]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "addressKeccak256Verify",
        "args": [
          {
            "name": "leaf",
            "type": "address"
          },
          {
            "name": "proof",
            "type": "byte[32][]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "tupleKeccak256Verify",
        "args": [
          {
            "name": "leaf",
            "type": "(uint64,address)"
          },
          {
            "name": "proof",
            "type": "byte[32][]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      }
    ]
  }
}
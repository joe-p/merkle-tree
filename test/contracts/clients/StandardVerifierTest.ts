/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(byte[32],byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "uint64keccak256Verify(uint64,byte[32][])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addressKeccak256Verify(address,byte[32][])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "tupleKeccak256Verify((uint64,address),byte[32][])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "uint64Keccak256Root": {
          "type": "bytes",
          "key": "uint64Keccak256Root"
        },
        "addressKeccak256Root": {
          "type": "bytes",
          "key": "addressKeccak256Root"
        },
        "tupleKeccak256Root": {
          "type": "bytes",
          "key": "tupleKeccak256Root"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "StandardVerifierTest",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "uint64Keccak256Root",
            "type": "byte[32]"
          },
          {
            "name": "addressKeccak256Root",
            "type": "byte[32]"
          },
          {
            "name": "tupleKeccak256Root",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "uint64keccak256Verify",
        "args": [
          {
            "name": "leaf",
            "type": "uint64"
          },
          {
            "name": "proof",
            "type": "byte[32][]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "addressKeccak256Verify",
        "args": [
          {
            "name": "leaf",
            "type": "address"
          },
          {
            "name": "proof",
            "type": "byte[32][]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "tupleKeccak256Verify",
        "args": [
          {
            "name": "leaf",
            "type": "(uint64,address)"
          },
          {
            "name": "proof",
            "type": "byte[32][]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the StandardVerifierTest smart contract.
 */
export type StandardVerifierTest = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(byte[32],byte[32],byte[32])void' | 'createApplication', {
      argsObj: {
        uint64Keccak256Root: Uint8Array
        addressKeccak256Root: Uint8Array
        tupleKeccak256Root: Uint8Array
      }
      argsTuple: [uint64Keccak256Root: Uint8Array, addressKeccak256Root: Uint8Array, tupleKeccak256Root: Uint8Array]
      returns: void
    }>
    & Record<'uint64keccak256Verify(uint64,byte[32][])bool' | 'uint64keccak256Verify', {
      argsObj: {
        leaf: bigint | number
        proof: Uint8Array[]
      }
      argsTuple: [leaf: bigint | number, proof: Uint8Array[]]
      returns: boolean
    }>
    & Record<'addressKeccak256Verify(address,byte[32][])bool' | 'addressKeccak256Verify', {
      argsObj: {
        leaf: string
        proof: Uint8Array[]
      }
      argsTuple: [leaf: string, proof: Uint8Array[]]
      returns: boolean
    }>
    & Record<'tupleKeccak256Verify((uint64,address),byte[32][])bool' | 'tupleKeccak256Verify', {
      argsObj: {
        leaf: [bigint | number, string]
        proof: Uint8Array[]
      }
      argsTuple: [leaf: [bigint | number, string], proof: Uint8Array[]]
      returns: boolean
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      uint64Keccak256Root?: BinaryState
      addressKeccak256Root?: BinaryState
      tupleKeccak256Root?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type StandardVerifierTestSig = keyof StandardVerifierTest['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends StandardVerifierTestSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the StandardVerifierTest smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends StandardVerifierTestSig> = StandardVerifierTest['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StandardVerifierTest smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StandardVerifierTestSig> = StandardVerifierTest['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type StandardVerifierTestCreateCalls = (typeof StandardVerifierTestCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type StandardVerifierTestCreateCallParams =
  | (TypedCallParams<'createApplication(byte[32],byte[32],byte[32])void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type StandardVerifierTestDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: StandardVerifierTestCreateCalls) => StandardVerifierTestCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class StandardVerifierTestCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the StandardVerifierTest smart contract using the createApplication(byte[32],byte[32],byte[32])void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(byte[32],byte[32],byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(byte[32],byte[32],byte[32])void' as const,
          methodArgs: Array.isArray(args) ? args : [args.uint64Keccak256Root, args.addressKeccak256Root, args.tupleKeccak256Root],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the uint64keccak256Verify(uint64,byte[32][])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static uint64keccak256Verify(args: MethodArgs<'uint64keccak256Verify(uint64,byte[32][])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'uint64keccak256Verify(uint64,byte[32][])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.leaf, args.proof],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addressKeccak256Verify(address,byte[32][])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addressKeccak256Verify(args: MethodArgs<'addressKeccak256Verify(address,byte[32][])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addressKeccak256Verify(address,byte[32][])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.leaf, args.proof],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the tupleKeccak256Verify((uint64,address),byte[32][])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static tupleKeccak256Verify(args: MethodArgs<'tupleKeccak256Verify((uint64,address),byte[32][])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'tupleKeccak256Verify((uint64,address),byte[32][])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.leaf, args.proof],
      ...params,
    }
  }
}

/**
 * A client to make calls to the StandardVerifierTest smart contract
 */
export class StandardVerifierTestClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `StandardVerifierTestClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof StandardVerifierTest['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the StandardVerifierTest smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: StandardVerifierTestDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(StandardVerifierTestCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the StandardVerifierTest smart contract using the createApplication(byte[32],byte[32],byte[32])void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(byte[32],byte[32],byte[32])void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(byte[32],byte[32],byte[32])void'>, AppCreateCallTransactionResult>(await $this.appClient.create(StandardVerifierTestCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the StandardVerifierTest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the uint64keccak256Verify(uint64,byte[32][])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public uint64keccak256Verify(args: MethodArgs<'uint64keccak256Verify(uint64,byte[32][])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StandardVerifierTestCallFactory.uint64keccak256Verify(args, params))
  }

  /**
   * Calls the addressKeccak256Verify(address,byte[32][])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addressKeccak256Verify(args: MethodArgs<'addressKeccak256Verify(address,byte[32][])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StandardVerifierTestCallFactory.addressKeccak256Verify(args, params))
  }

  /**
   * Calls the tupleKeccak256Verify((uint64,address),byte[32][])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public tupleKeccak256Verify(args: MethodArgs<'tupleKeccak256Verify((uint64,address),byte[32][])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StandardVerifierTestCallFactory.tupleKeccak256Verify(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<StandardVerifierTest['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get uint64Keccak256Root() {
        return StandardVerifierTestClient.getBinaryState(state, 'uint64Keccak256Root')
      },
      get addressKeccak256Root() {
        return StandardVerifierTestClient.getBinaryState(state, 'addressKeccak256Root')
      },
      get tupleKeccak256Root() {
        return StandardVerifierTestClient.getBinaryState(state, 'tupleKeccak256Root')
      },
    }
  }

  public compose(): StandardVerifierTestComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      uint64keccak256Verify(args: MethodArgs<'uint64keccak256Verify(uint64,byte[32][])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.uint64keccak256Verify(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addressKeccak256Verify(args: MethodArgs<'addressKeccak256Verify(address,byte[32][])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addressKeccak256Verify(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      tupleKeccak256Verify(args: MethodArgs<'tupleKeccak256Verify((uint64,address),byte[32][])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.tupleKeccak256Verify(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as StandardVerifierTestComposer
  }
}
export type StandardVerifierTestComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the uint64keccak256Verify(uint64,byte[32][])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  uint64keccak256Verify(args: MethodArgs<'uint64keccak256Verify(uint64,byte[32][])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): StandardVerifierTestComposer<[...TReturns, MethodReturn<'uint64keccak256Verify(uint64,byte[32][])bool'>]>

  /**
   * Calls the addressKeccak256Verify(address,byte[32][])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addressKeccak256Verify(args: MethodArgs<'addressKeccak256Verify(address,byte[32][])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): StandardVerifierTestComposer<[...TReturns, MethodReturn<'addressKeccak256Verify(address,byte[32][])bool'>]>

  /**
   * Calls the tupleKeccak256Verify((uint64,address),byte[32][])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tupleKeccak256Verify(args: MethodArgs<'tupleKeccak256Verify((uint64,address),byte[32][])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): StandardVerifierTestComposer<[...TReturns, MethodReturn<'tupleKeccak256Verify((uint64,address),byte[32][])bool'>]>

  /**
   * Makes a clear_state call to an existing instance of the StandardVerifierTest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): StandardVerifierTestComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): StandardVerifierTestComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<StandardVerifierTestComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<StandardVerifierTestComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type StandardVerifierTestComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type StandardVerifierTestComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
